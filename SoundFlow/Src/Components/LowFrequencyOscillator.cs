using SoundFlow.Abstracts;

namespace SoundFlow.Components;

/// <summary>
/// A Low Frequency Oscillator (LFO) component that generates periodic waveforms at a sub-audio rate.
/// </summary>
public class LowFrequencyOscillator : SoundComponent
{
    /// <inheritdoc/>
    public override string Name { get; set; } = "LFO";

    /// <summary>
    /// Defines the different waveform shapes that the LFO can generate.
    /// </summary>
    public enum WaveformType
    {
        /// <summary>
        /// A smooth, sinusoidal waveform.
        /// </summary>
        Sine,
        /// <summary>
        /// A waveform that alternates abruptly between two levels, creating a pulse.
        /// </summary>
        Square,
        /// <summary>
        /// A waveform that linearly ramps up and down, creating a triangular shape.
        /// </summary>
        Triangle,
        /// <summary>
        /// A waveform that ramps upwards linearly and then abruptly resets to the starting level.
        /// </summary>
        Sawtooth,
        /// <summary>
        /// A waveform that ramps downwards linearly and then abruptly resets to the starting level.
        /// </summary>
        ReverseSawtooth,
        /// <summary>
        /// A waveform that generates random values at each sample.
        /// </summary>
        Random,
        /// <summary>
        /// A waveform that holds a random value constant for a cycle and then changes to a new random value.
        /// </summary>
        SampleAndHold
    }

    /// <summary>
    /// Defines how the LFO's phase is triggered or progresses.
    /// </summary>
    public enum TriggerMode
    {
        /// <summary>
        /// The LFO runs continuously without any external triggering.
        /// </summary>
        FreeRunning,
        /// <summary>
        /// The LFO's phase is reset to the <see cref="Phase"/> value each time the <see cref="Trigger"/> method is called.
        /// </summary>
        NoteTrigger
    }

    // Parameters
    private float _rate = 1f;

    /// <summary>
    /// Gets or sets the rate of the LFO in Hertz (cycles per second).
    /// This determines how fast the waveform oscillates. Must be a non-negative value.
    /// </summary>
    public float Rate
    {
        get => _rate;
        set => _rate = Math.Max(0f, value);
    }

    private float _depth = 1f;

    /// <summary>
    /// Gets or sets the depth or amplitude of the LFO output, typically in the range of 0 to 1 or beyond for more pronounced effects.
    /// This scales the output waveform.
    /// </summary>
    public float Depth
    {
        get => _depth;
        set => _depth = value;
    }

    /// <summary>
    /// Gets or sets the type of waveform generated by the LFO.
    /// See <see cref="WaveformType"/> for available waveform shapes.
    /// </summary>
    public WaveformType Type { get; set; } = WaveformType.Sine;

    /// <summary>
    /// Gets or sets the trigger mode of the LFO, determining how its phase is controlled.
    /// See <see cref="TriggerMode"/> for available trigger modes.
    /// </summary>
    public TriggerMode Mode { get; set; } = TriggerMode.FreeRunning;

    /// <summary>
    /// Gets or sets the phase offset of the LFO in radians.
    /// This allows for shifting the starting point of the waveform.
    /// </summary>
    public float Phase { get; set; } = 0f;

    /// <summary>
    /// An event that is invoked whenever the LFO's output value changes during audio generation.
    /// Subscribers can use this to react to changes in the LFO's output, for example, to drive visualisations or other components.
    /// </summary>
    public Action<float>? OnOutputChanged { get; set; }

    // Internal state
    private float _phaseIncrement;
    private float _currentPhase;
    private readonly Random _random = new();
    private float _lastOutput;
    private float _shValue;

    /// <summary>
    /// Triggers the LFO to reset its phase if in <see cref="TriggerMode.NoteTrigger"/> mode.
    /// For Sample and Hold waveform, it also updates the held random value.
    /// This method has no effect if the LFO is in <see cref="TriggerMode.FreeRunning"/> mode.
    /// </summary>
    public void Trigger()
    {
        if (Mode != TriggerMode.NoteTrigger) return;
        _currentPhase = Phase; // Reset phase on trigger
        if (Type == WaveformType.SampleAndHold)
        {
            _shValue = (float)(_random.NextDouble() * 2.0 - 1.0); // Update S&H value on trigger
        }
    }

    /// <inheritdoc/>
    protected override void GenerateAudio(Span<float> buffer)
    {
        _phaseIncrement = (float)(2.0 * Math.PI * Rate / AudioEngine.Instance.SampleRate);

        for (var i = 0; i < buffer.Length; i++)
        {
            buffer[i] = GenerateSample();
        }
    }

    /// <summary>
    /// Generates a single sample of the LFO waveform based on the current parameters and internal state.
    /// </summary>
    /// <returns>The generated LFO sample value.</returns>
    private float GenerateSample()
    {
        var sampleValue = 0f;

        switch (Type)
        {
            case WaveformType.Sine:
                sampleValue = MathF.Sin(_currentPhase + Phase);
                break;
            case WaveformType.Square:
                sampleValue = (_currentPhase + Phase) % (2 * Math.PI) < Math.PI ? 1f : -1f;
                break;
            case WaveformType.Triangle:
            {
                var phaseValue = (_currentPhase + Phase) / (float)(2.0 * Math.PI);
                var progress = phaseValue - (int)phaseValue; // Normalize to 0-1
                sampleValue = progress < 0.5f ? 4f * progress - 1f : -4f * progress + 3f;
                break;
            }
            case WaveformType.Sawtooth:
                sampleValue = 2f * (((_currentPhase + Phase) % (2 * MathF.PI)) / (float)(2.0 * Math.PI)) - 1f;
                break;
            case WaveformType.ReverseSawtooth:
                sampleValue = 1f - 2f * (((_currentPhase + Phase) % (2 * MathF.PI)) / (float)(2.0 * Math.PI));
                break;
            case WaveformType.Random:
                sampleValue = (float)(_random.NextDouble() * 2.0 - 1.0);
                break;
            case WaveformType.SampleAndHold:
                if (Mode == TriggerMode.FreeRunning)
                {
                    // Update on each new cycle
                    if (_currentPhase < _phaseIncrement) // Approaching the start of a new cycle
                        _shValue = (float)(_random.NextDouble() * 2.0 - 1.0);
                }

                // In NoteTrigger mode, _shValue is updated in the Trigger() method
                sampleValue = _shValue;
                break;
        }

        // Update the phase (only if FreeRunning)
        if (Mode == TriggerMode.FreeRunning)
        {
            _currentPhase += _phaseIncrement;
            if (_currentPhase >= 2.0 * Math.PI)
            {
                _currentPhase -= (float)(2.0 * Math.PI);
            }
        }

        // Store the current output AFTER phase update
        _lastOutput = sampleValue * Depth;

        // Call the OnOutputChanged event
        OnOutputChanged?.Invoke(_lastOutput);

        // Scale by depth and return
        return _lastOutput;
    }

    /// <summary>
    /// Gets the last generated output value of the LFO.
    /// </summary>
    /// <returns>The last output value.</returns>
    public float GetLastOutput()
    {
        return _lastOutput;
    }
}